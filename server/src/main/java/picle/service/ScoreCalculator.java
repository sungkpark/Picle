package picle.service;

public class ScoreCalculator {
    /**
     * This class contains some static methods to calculate the scores.
     * The scores are the amount of grams of CO2-equivalents saved in total.
     */

    /**
     * Calculate the amount of saved CO2-equivalents.
     * @param servings the amount of servings.
     * @return the amount of grams of CO2-equivalents saved in total.
     */
    public static int vegetarianMeal(int servings) {
        return 2310 * servings;
    }

    /**
     * Calculate the amount of saved CO2 by riding bike instead of car.
     * @param distance distance travelled in kilometers
     * @return amount of CO2 saved in grams
     */
    public static int bikeInsteadOfCar(int distance) {
        return 251 * distance;
    }

    /**
     * Calculate the amount of saved CO2 by buying locally produced food by number of products.
     * @param amount number of products (by average)
     * @return amount of CO2 saved in grams
     */
    public static int buyLocalProduct(int amount) {
        return 329 * amount;
    }

    /**
     * Calculate the amount of saved CO2 by different house type and different
     * house set temperature (daily emission score).
     * @param houseType from 1 to 5 depending on house type (see doc)
     * @param temp temperature of house set to (in celsius)
     * @return amount of CO2 saved in score
     */
    public static int loweringHouseTemp(int houseType, double temp) {
        switch (houseType) {
            case 1:
                return (int) Math.round(
                        4693 - (4693 * Math.pow(0.94, 21 - temp)));
            case 2:
                return (int) Math.round(
                        6335 - (6335 * Math.pow(0.94, 21 - temp)));
            case 3:
                return (int) Math.round(
                        7415 - (7415 * Math.pow(0.94, 21 - temp)));
            case 4:
                return (int) Math.round(
                        8447 - (8447 * Math.pow(0.94, 21 - temp)));
            case 5:
                return (int) Math.round(
                        11310 - (11310 * Math.pow(0.94, 21 - temp)));
            default:
                return 0;
        }
    }

    /**
     * Calculate the amount of saved CO2 by taking public transport instead of a car.
     * @param distance distance traveled (in kilometers)
     * @return amount of CO2 saved in grams
     */
    public static int publicTransportInsteadOfCar(int distance) {
        return 185 * distance;
    }

    /**
     * Calculate the amount of saved CO2 by installing solar panels.
     * @param energy amount of energy generated by the solar panels per month (in kilowatt hours)
     * @return amount of CO2 saved in grams
     */
    public static int installingSolarPanels(int energy) {
        return 579 * energy;
    }

    /**
     * Calculate the amount of saved CO2-equivalents for any activity.
     * @param activityTypeId The type of the activity
     *                       1: vegetarian meal
     *                       2: buying local produce
     *                       3: bike instead of car
     *                       4: public transport instead of car
     *                       5: lowering house temperature
     *                       6: installing solar panels
     * @param param1 The first parameter
     * @param param2 The second parameter
     * @return the amount of grams of CO2-equivalents saved.
     */
    public static int calculateScore(int activityTypeId, int param1, int param2) {
        switch (activityTypeId) {
            case 1:
                return vegetarianMeal(param1);
            case 2:
                return buyLocalProduct(param1);
            case 3:
                return bikeInsteadOfCar(param1);
            case 4:
                return publicTransportInsteadOfCar(param1);
            case 5:
                return loweringHouseTemp(param1, param2);
            case 6:
                return installingSolarPanels(param1);
            default:
                return 0;
        }
    }
}
